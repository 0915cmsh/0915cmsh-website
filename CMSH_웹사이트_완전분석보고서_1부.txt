================================================================================
                    CMSH 웹사이트 완전 분석 보고서 (1부)
                    공지사항/문의 시스템 복구 작업 상세 분석
================================================================================

작성일: 2025년 9월 26일
작성자: AI Assistant
프로젝트: CMSH (KOREA WORKS) 인재 솔루션 전문 기업 웹사이트
기술스택: Next.js 15, TypeScript, Tailwind CSS, Prisma, PostgreSQL
도메인: https://www.urbane-cmsh.com

================================================================================
                                목차
================================================================================

1부: 프로젝트 개요 및 전체 아키텍처
2부: 문제 상황 및 원인 분석
3부: 해결 전략 및 구현 세부사항
4부: 코드 분석 및 성능 최적화
5부: 배포 및 운영 가이드

================================================================================
                        1부: 프로젝트 개요 및 전체 아키텍처
================================================================================

1.1 프로젝트 개요
================

1.1.1 회사 정보
- 회사명: CMSH (씨엠에스에이치)
- 법인명: KOREA WORKS
- 주소: 경기도 안산시 상록구 조구나리1길 56
- 연락처: 1544-7494, 010-5617-5949
- 이메일: hj.kim@urbane-gp.com
- 슬로건: "고객과 인재가 함께 성장하는 아웃소싱 파트너"

1.1.2 사업 영역
- 파견 서비스: 전문 인력 파견
- 아웃소싱: 비즈니스 프로세스 아웃소싱
- 헤드헌팅: 고급 인재 발굴
- RPO: 채용 프로세스 아웃소싱

1.1.3 기술 스택
- Frontend: Next.js 15, React 19, TypeScript
- Styling: Tailwind CSS 4
- Backend: Next.js API Routes
- Database: PostgreSQL + Prisma ORM
- Deployment: Vercel
- Fonts: Geist Sans, Geist Mono

1.2 전체 시스템 아키텍처
========================

1.2.1 3-Tier 아키텍처 구조
┌─────────────────────────────────────────────────────────────┐
│                    Presentation Layer                      │
│  ┌─────────────────────────────────────────────────────┐   │
│  │              Next.js 15 Frontend                    │   │
│  │  • App Router 기반 페이지 라우팅                    │   │
│  │  • React 19 컴포넌트 기반 UI                       │   │
│  │  • TypeScript 타입 안전성                          │   │
│  │  • Tailwind CSS 반응형 스타일링                    │   │
│  │  • Server-Side Rendering (SSR)                     │   │
│  └─────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────┘
                              │
                              ▼
┌─────────────────────────────────────────────────────────────┐
│                    Business Logic Layer                     │
│  ┌─────────────────────────────────────────────────────┐   │
│  │              Next.js API Routes                     │   │
│  │  • RESTful API 엔드포인트                          │   │
│  │  • 공지사항 CRUD (/api/notice)                     │   │
│  │  • 문의 관리 CRUD (/api/inquiry)                   │   │
│  │  • 헬스체크 API (/api/_ping, /api/_health)         │   │
│  │  • 이메일 발송 API (/api/send-email)               │   │
│  │  • 런타임 모드 전환 시스템                         │   │
│  └─────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────┘
                              │
                              ▼
┌─────────────────────────────────────────────────────────────┐
│                      Data Layer                            │
│  ┌─────────────────────────────────────────────────────┐   │
│  │              Prisma ORM + PostgreSQL               │   │
│  │  • Notice 모델 (공지사항)                          │   │
│  │  • Inquiry 모델 (문의)                             │   │
│  │  • Reply 모델 (답변)                               │   │
│  │  • 스냅샷 모드 (인라인 데이터)                     │   │
│  │  • Lazy Loading 패턴                              │   │
│  └─────────────────────────────────────────────────────┘   │
└─────────────────────────────────────────────────────────────┘

1.2.2 컴포넌트 아키텍처
src/
├── app/                           # Next.js App Router
│   ├── (about)/                   # 회사소개 그룹 라우트
│   │   ├── contact/page.tsx       # 오시는 길 (/84)
│   │   ├── greeting/page.tsx      # 인사말 (/46)
│   │   ├── org/page.tsx          # 조직도 (/56)
│   │   └── overview/page.tsx     # 회사개요 (/54)
│   ├── (business)/                # 사업소개 그룹 라우트
│   │   ├── dispatch/page.tsx      # 파견 서비스 (/57)
│   │   ├── headhunting/page.tsx   # 헤드헌팅 (/60)
│   │   ├── outsourcing/page.tsx   # 아웃소싱 (/59)
│   │   └── rpo/page.tsx          # RPO (/61)
│   ├── about/                     # 회사소개 페이지
│   ├── business/                  # 사업소개 페이지
│   ├── notice/                    # 공지사항 시스템
│   │   ├── page.tsx              # 공지사항 목록
│   │   └── [id]/page.tsx         # 공지사항 상세
│   ├── inquiry/                   # 문의 시스템
│   │   ├── board/page.tsx        # 문의 게시판
│   │   ├── corporate/page.tsx    # 기업 문의
│   │   ├── employee/page.tsx     # 재직자 문의
│   │   ├── jobseeker/page.tsx    # 구직자 문의
│   │   └── new/page.tsx          # 통합 문의 폼
│   ├── admin/                     # 관리자 시스템
│   │   ├── dashboard/page.tsx    # 관리자 대시보드
│   │   ├── login/page.tsx        # 관리자 로그인
│   │   ├── notice/[id]/page.tsx  # 공지사항 관리
│   │   └── inquiry/[id]/page.tsx # 문의 관리
│   ├── api/                       # API 라우트
│   │   ├── notice/               # 공지사항 API
│   │   ├── inquiry/              # 문의 API
│   │   ├── _ping/route.ts        # 헬스체크
│   │   └── _health/              # 상태 확인
│   ├── media/[id]/page.tsx       # 미디어 상세
│   ├── basic/page.tsx            # 이용약관
│   ├── policy/privacy/page.tsx   # 개인정보처리방침
│   ├── faq/page.tsx              # 자주묻는질문
│   ├── layout.tsx                # 루트 레이아웃
│   └── page.tsx                  # 홈페이지
├── components/                    # 재사용 컴포넌트
│   ├── Header.tsx                # 헤더 네비게이션
│   ├── Footer.tsx                # 푸터
│   ├── Hero.tsx                  # 히어로 섹션
│   ├── Section.tsx               # 섹션 래퍼
│   ├── ServiceCard.tsx           # 서비스 카드
│   ├── PartnerGrid.tsx           # 파트너 그리드
│   ├── PartnerMarquee.tsx        # 파트너 마퀴
│   ├── InquiryForm.tsx           # 문의 폼
│   ├── YouTubeEmbed.tsx          # YouTube 임베드
│   └── AboutTabs.tsx             # 회사소개 탭
└── lib/                          # 유틸리티 라이브러리
    ├── prisma.ts                 # Prisma 클라이언트
    ├── runtime.ts                # 런타임 설정
    ├── company.ts                # 회사 정보
    ├── email.ts                  # 이메일 발송
    ├── mailer.ts                 # 메일러 설정
    ├── base-url.ts               # 기본 URL 유틸
    ├── date.ts                   # 날짜 유틸
    └── utils.ts                  # 공통 유틸

1.3 라우팅 시스템
================

1.3.1 URL 리라이트 규칙 (next.config.ts)
- /46 → /about/greeting (인사말)
- /53 → /about/greeting (인사말)
- /54 → /about/company-overview (회사개요)
- /56 → /about/organization (조직도)
- /57 → /business/dispatch (파견 서비스)
- /59 → /business/outsourcing (아웃소싱)
- /60 → /business/headhunting (헤드헌팅)
- /61 → /business/rpo (RPO)
- /84 → /about/contact (오시는 길)
- /notice01 → /notice (공지사항)

1.3.2 페이지 구조
홈페이지 (/)
├── Hero 섹션 (히어로 배경, 메인 타이틀, CTA 버튼)
├── 서비스 소개 (4개 서비스 카드)
├── 파트너 마퀴 (로고 슬라이더)
└── 연락처 섹션 (문의 버튼, 하이라이트 카드)

회사소개 (/about/*)
├── 인사말 (/about/greeting)
├── 회사개요 (/about/company-overview)
├── 조직도 (/about/organization)
└── 오시는 길 (/about/contact)

사업소개 (/business/*)
├── 파견 서비스 (/business/dispatch)
├── 아웃소싱 (/business/outsourcing)
├── 헤드헌팅 (/business/headhunting)
└── RPO (/business/rpo)

공지사항 시스템 (/notice/*)
├── 공지사항 목록 (/notice)
└── 공지사항 상세 (/notice/[id])

문의 시스템 (/inquiry/*)
├── 문의 게시판 (/inquiry/board)
├── 기업 문의 (/inquiry/corporate)
├── 구직자 문의 (/inquiry/jobseeker)
├── 재직자 문의 (/inquiry/employee)
└── 통합 문의 폼 (/inquiry/new)

관리자 시스템 (/admin/*)
├── 관리자 로그인 (/admin/login)
├── 관리자 대시보드 (/admin/dashboard)
├── 공지사항 관리 (/admin/notice/[id])
└── 문의 관리 (/admin/inquiry/[id])

1.4 데이터베이스 스키마
======================

1.4.1 Prisma 스키마 구조
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String   @default("관리자")
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Inquiry {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  message   String
  name      String
  phone     String
  email     String?
  password  String?
  status    String   @default("대기")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Reply     Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  inquiryId Int
  content   String
  author    String   @default("관리자")
  createdAt DateTime @default(now())
  Inquiry   Inquiry  @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
}
```

1.4.2 모델 관계 분석
- Inquiry ↔ Reply: 1:N 관계 (CASCADE 삭제)
- 외래키 제약조건으로 참조 무결성 보장
- 자동 타임스탬프 관리 (@default(now()), @updatedAt)

1.5 스타일링 시스템
===================

1.5.1 CSS 변수 시스템 (globals.css)
```css
:root {
  --bg: #FFFFFF;            /* 메인 배경 */
  --surface: #F7FAFC;       /* 콘텐츠 영역 배경 */
  --primary: #366DFF;       /* 액센트 컬러 */
  --primary-hover: #2559D9; /* 호버 상태 */
  --text: #1A202C;          /* 기본 텍스트 */
  --border: #E2E8F0;        /* 테두리 */
}
```

1.5.2 컴포넌트 스타일 클래스
- .btn-primary: 기본 버튼 스타일
- .btn-secondary: 보조 버튼 스타일
- .input-field: 입력 필드 스타일
- .card: 카드 컴포넌트 스타일
- .section-pad: 섹션 패딩
- .text-shadow-*: 텍스트 그림자
- .drop-shadow-*: 드롭 그림자

1.5.3 반응형 디자인
- 모바일 우선 설계 (Mobile First)
- Tailwind CSS 브레이크포인트 활용
- 커스텀 모바일 최적화 클래스
- 터치 스크롤 지원

================================================================================
                        2부: 문제 상황 및 원인 분석
================================================================================

2.1 주요 문제 상황
==================

2.1.1 Vercel 배포 실패
- 증상: "Build Failed - Command 'npx prisma generate && next build' exited with 1"
- 영향: 웹사이트 전체 접근 불가
- 원인: Prisma 스키마 문법 오류

2.1.2 공지사항 데이터 미표시
- 증상: "등록된 공지사항이 없습니다" 메시지 표시
- 영향: 사용자에게 빈 페이지 제공
- 원인: API 500 오류, 데이터베이스 연결 실패

2.1.3 문의게시판 데이터 미표시
- 증상: 문의 목록이 비어있음
- 영향: 고객 문의 시스템 기능 상실
- 원인: API 오류, 스키마 불일치

2.1.4 API 엔드포인트 오류
- 증상: /api/notice, /api/inquiry 500 오류
- 영향: 프론트엔드 데이터 로딩 실패
- 원인: Prisma Client 초기화 실패

2.2 근본 원인 분석
==================

2.2.1 Prisma 스키마 문법 오류
문제: Notice, Inquiry 모델의 updatedAt 필드에 @updatedAt 데코레이터 누락
```prisma
// 문제가 있던 코드
model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String   @default("관리자")
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime  // @updatedAt 데코레이터 누락
}
```

영향:
- Prisma Client 생성 시 문법 오류 발생
- Vercel 빌드 프로세스 실패
- 데이터베이스 마이그레이션 불가

2.2.2 Vercel 빌드 명령어 문제
문제: migrate deploy 명령어가 Vercel 환경에서 실패
```json
// 문제가 있던 설정
{
  "scripts": {
    "vercel-build": "prisma migrate deploy && next build"
  }
}
```

영향:
- Vercel 빌드 프로세스 중단
- 데이터베이스 스키마 동기화 실패
- 배포 불가

2.2.3 스냅샷 파일 경로 문제
문제: Vercel에서 @/fallback/* 경로 해석 실패
```typescript
// 문제가 있던 코드
const mod = await import('@/fallback/notice.json');
```

영향:
- 동적 import 실패
- Fallback 데이터 로드 불가
- API 응답 실패

2.2.4 런타임 모드 설정 문제
문제: READ_MODE 기본값이 'db'로 설정되어 DB 연결 시도
```typescript
// 문제가 있던 설정
export const READ_MODE = ((process.env.READ_MODE as 'db' | 'snapshot') || 'db');
```

영향:
- DATABASE_URL이 없을 때 DB 접근 시도
- Prisma Client 초기화 실패
- 500 오류 발생

2.2.5 API 라우트 구조 문제
문제: Prisma Client를 top-level에서 import하여 초기화 시도
```typescript
// 문제가 있던 코드
import { prisma } from '@/lib/prisma'; // top-level import

export async function GET() {
  // DB 연결 실패 시 적절한 fallback 없음
  const items = await prisma.notice.findMany();
}
```

영향:
- DB 연결 실패 시 500 오류
- 적절한 에러 핸들링 부족
- 사용자에게 빈 응답 제공

2.3 문제 발생 시나리오
======================

2.3.1 배포 시나리오
1. 코드 푸시 → Vercel 빌드 시작
2. Prisma 스키마 문법 오류 감지
3. 빌드 프로세스 중단
4. 배포 실패

2.3.2 런타임 시나리오
1. 사용자가 /notice 페이지 접근
2. getNotices() 함수에서 API 호출
3. /api/notice에서 Prisma Client 초기화 시도
4. DATABASE_URL 없음으로 연결 실패
5. 500 오류 반환
6. 프론트엔드에서 빈 배열 처리
7. "등록된 공지사항이 없습니다" 표시

2.4 영향도 분석
================

2.4.1 비즈니스 영향
- 웹사이트 접근 불가로 인한 고객 이탈
- 문의 시스템 기능 상실로 영업 기회 손실
- 브랜드 신뢰도 하락

2.4.2 기술적 영향
- 개발팀의 긴급 대응 필요
- 사용자 경험 저하
- 시스템 안정성 문제

================================================================================
                        3부: 해결 전략 및 구현 세부사항
================================================================================

3.1 해결 전략
==============

3.1.1 단계별 접근법
1단계: 긴급 복구 (스냅샷 모드 구현)
2단계: 안정화 (Prisma 스키마 수정)
3단계: 최적화 (Lazy Loading 패턴)
4단계: 강화 (에러 핸들링 개선)

3.1.2 핵심 설계 원칙
- 데이터베이스 연결 실패 시에도 서비스 제공 보장
- 스냅샷 모드를 기본값으로 설정하여 안정성 확보
- 인라인 데이터를 통한 즉시 응답 보장
- 관리자 기능은 DB 모드에서만 활성화

3.2 구현 세부사항
==================

3.2.1 Prisma 스키마 수정
```prisma
// 수정된 스키마
model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String   @default("관리자")
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  // @updatedAt 데코레이터 추가
}

model Inquiry {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  message   String
  name      String
  phone     String
  email     String?
  password  String?
  status    String   @default("대기")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  // @updatedAt 데코레이터 추가
  Reply     Reply[]
}
```

3.2.2 빌드 명령어 최적화
```json
// package.json 수정
{
  "scripts": {
    "vercel-build": "prisma generate && next build"
  }
}
```

3.2.3 런타임 설정 수정
```typescript
// src/lib/runtime.ts
export const IS_PROD = process.env.VERCEL_ENV === 'production';
export const READ_MODE = ((process.env.READ_MODE as 'db' | 'snapshot') || 'snapshot');
export const CAN_USE_DB = !!process.env.DATABASE_URL && READ_MODE === 'db';
```

3.2.4 인라인 데이터 시스템 구현
```typescript
// src/app/api/notice/route.ts
function loadSnapshot(): Notice[] {
  return [
    {
      id: 270,
      title: "CMSH 2025년 신규 AI 기반 인재 매칭 서비스 런칭",
      content: "CMSH가 2025년 새로운 AI 기반 인재 매칭 서비스를 런칭합니다...",
      author: "관리자",
      published: true,
      createdAt: "2025-09-01T00:00:00.000Z",
      updatedAt: "2025-09-01T00:00:00.000Z"
    },
    // ... 추가 데이터
  ];
}
```

3.2.5 Lazy Prisma Client 패턴
```typescript
// Lazy loading 구현
type PrismaClientT = typeof import('@prisma/client').PrismaClient;
let _prisma: PrismaClientT | null = null;

async function getPrisma() {
  if (_prisma) return _prisma;
  const mod = await import('@prisma/client');
  _prisma = new mod.PrismaClient({
    log: process.env.VERCEL_ENV === 'production' ? ['error'] : ['warn', 'error'],
  });
  return _prisma;
}
```

================================================================================
                                보고서 1부 끝
================================================================================
